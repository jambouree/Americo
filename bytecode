#
#  Panoramix v4 Oct 2019 
#  Decompiled source of ropsten:0xFfbc7EbdEBbfc97625aA07178aC89d87D4d18F07
# 
#  Let's make the world open source 
# 

const unknown46b38ea2 = Array(len=47, data=0x7368747470733a2f2f766974746f6d696e61636f72692e6769746875622e696f2f65726332302d67656e657261746f, memem
const unknowna217fddf = 0
const unknownd5391393 = sha3(84977242096978)
const unknownf5b541a6 = sha3(5715144146718838610)

def storage:
  balanceOf is mapping of uint256 at storage 0
  allowance is mapping of uint256 at storage 1
  totalSupply is uint256 at storage 2
  name is array of uint256 at storage 3
  symbol is array of uint256 at storage 4
  decimals is uint8 at storage 5
  cap is uint256 at storage 6
  stor7 is mapping of uint8 at storage 7
  unknown248a9ca3 is mapping of struct at storage 8
  transferEnabled is uint8 at storage 9 offset 168
  mintingFinished is uint8 at storage 9 offset 160
  owner is addr at storage 9
  stor84977242096978 is mapping of uint256 at storage 0x4d494e544552
  stor5715144146718838610 is mapping of uint256 at storage 0x4f50455241544f52

def supportsInterface(bytes4 _interfaceId) payable: 
  require calldata.size - 4 >= 32
  return bool(stor7[Mask(32, 224, _interfaceId)])

def mintingFinished() payable: 
  return bool(mintingFinished)

def name() payable: 
  return name[0 len name.length]

def totalSupply() payable: 
  return totalSupply

def unknown248a9ca3(uint256 _param1) payable: 
  require calldata.size - 4 >= 32
  return unknown248a9ca3[_param1].field_512

def decimals() payable: 
  return decimals

def cap() payable: 
  return cap

def transferEnabled() payable: 
  return bool(transferEnabled)

def balanceOf(address _owner) payable: 
  require calldata.size - 4 >= 32
  return balanceOf[addr(_owner)]

def owner() payable: 
  return owner

def unknown9010d07c(uint256 _param1, uint256 _param2) payable: 
  require calldata.size - 4 >= 64
  if _param2 >= unknown248a9ca3[_param1].field_0:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0xfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64,
                  mem[198 len 30]
  return unknown248a9ca3[_param1][_param2].field_0

def unknown91d14854(uint256 _param1, addr _param2) payable: 
  require calldata.size - 4 >= 64
  return bool(unknown248a9ca3[_param1][1][addr(_param2)].field_0)

def symbol() payable: 
  return symbol[0 len symbol.length]

def unknownca15c873(uint256 _param1) payable: 
  require calldata.size - 4 >= 32
  return unknown248a9ca3[_param1].field_0

def allowance(address _owner, address _spender) payable: 
  require calldata.size - 4 >= 64
  return allowance[addr(_owner)][addr(_spender)]

#
#  Regular functions
#

def _fallback() payable: # default function
  revert

def enableTransfer() payable: 
  if owner != caller:
      revert with 0, 'eOwnable: caller is not the owne'
  transferEnabled = 1
  log TransferEnabled()

def finishMinting() payable: 
  if mintingFinished:
      revert with 0, 'BaseToken: minting is finished'
  if owner != caller:
      revert with 0, 'eOwnable: caller is not the owne'
  mintingFinished = 1
  log MintFinished()

def renounceOwnership() payable: 
  if owner != caller:
      revert with 0, 'eOwnable: caller is not the owne'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)
  owner = 0

def recoverERC20(address _tokenAddress, uint256 _tokens) payable: 
  require calldata.size - 4 >= 64
  if owner != caller:
      revert with 0, 'eOwnable: caller is not the owne'
  require ext_code.size(_tokenAddress)
  call _tokenAddress.transfer(address to, uint256 value) with:
       gas gas_remaining wei
      args owner, _tokens
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32

def transferOwnership(address _newOwner) payable: 
  require calldata.size - 4 >= 32
  if owner != caller:
      revert with 0, 'eOwnable: caller is not the owne'
  if not _newOwner:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  38,
                  0x654f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                  mem[202 len 26]
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=_newOwner)
  owner = _newOwner

def burn(uint256 _value) payable: 
  require calldata.size - 4 >= 32
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  33,
                  0x6545524332303a206275726e2066726f6d20746865207a65726f20616464726573,
                  mem[197 len 31]
  if _value > balanceOf[caller]:
      revert with 0, 32, 34, 0x7445524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[162 len 30], mem[222 len 2]
  balanceOf[caller] -= _value
  if _value > totalSupply:
      revert with 0, 'SafeMath: subtraction overflow'
  totalSupply -= _value
  log Transfer(
        address from=_value,
        address to=caller,
        uint256 value=0)

def approve(address _spender, uint256 _value) payable: 
  require calldata.size - 4 >= 64
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[200 len 28]
  if not _spender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[198 len 30]
  allowance[caller][addr(_spender)] = _value
  log Approval(
        address owner=_value,
        address spender=caller,
        uint256 value=_spender)
  return 1

def decreaseAllowance(address _spender, uint256 _subtractedValue) payable: 
  require calldata.size - 4 >= 64
  if _subtractedValue > allowance[caller][addr(_spender)]:
      revert with 0, 
                  32,
                  37,
                  0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                  mem[165 len 27],
                  mem[219 len 5]
  if not caller:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
  if not _spender:
      revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
  allowance[caller][addr(_spender)] -= _subtractedValue
  log Approval(
        address owner=(allowance[caller][addr(_spender)] - _subtractedValue),
        address spender=caller,
        uint256 value=_spender)
  return 1

def increaseAllowance(address _spender, uint256 _addedValue) payable: 
  require calldata.size - 4 >= 64
  if _addedValue + allowance[caller][addr(_spender)] < allowance[caller][addr(_spender)]:
      revert with 0, 'SafeMath: addition overflow'
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[200 len 28]
  if not _spender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[198 len 30]
  allowance[caller][addr(_spender)] += _addedValue
  log Approval(
        address owner=(_addedValue + allowance[caller][addr(_spender)]),
        address spender=caller,
        uint256 value=_spender)
  return 1

def unknown2f2ff15d(uint256 _param1, addr _param2) payable: 
  require calldata.size - 4 >= 64
  if not unknown248a9ca3[unknown248a9ca3[_param1].field_512][1][caller].field_0:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  47,
                  0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                  mem[211 len 17]
  if not unknown248a9ca3[_param1][1][addr(_param2)].field_0:
      unknown248a9ca3[_param1].field_0++
      unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0 = _param2
      unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_160 = 0
      unknown248a9ca3[_param1][1][addr(_param2)].field_0 = unknown248a9ca3[_param1].field_0
      log 0x2f878811: _param1, _param2, caller

def mint(address _to, uint256 _amount) payable: 
  require calldata.size - 4 >= 64
  if mintingFinished:
      revert with 0, 'BaseToken: minting is finished'
  if not stor8[('name', 'stor4D49', 84977242096978)][1][caller]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  43,
                  0x65526f6c65733a2063616c6c657220646f6573206e6f74206861766520746865204d494e54455220726f6c,
                  mem[207 len 21]
  if not _to:
      revert with 0, 'ERC20: mint to the zero address'
  if _amount + totalSupply < totalSupply:
      revert with 0, 'SafeMath: addition overflow'
  if _amount + totalSupply > cap:
      revert with 0, 'ERC20Capped: cap exceeded'
  if _amount + totalSupply < totalSupply:
      revert with 0, 'SafeMath: addition overflow'
  totalSupply += _amount
  if _amount + balanceOf[addr(_to)] < balanceOf[addr(_to)]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] += _amount
  log Transfer(
        address from=_amount,
        address to=0,
        uint256 value=_to)

def approveAndCall(address _spender, uint256 _value) payable: 
  require calldata.size - 4 >= 64
  if not caller:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[232 len 28]
  if not _spender:
      revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[230 len 30]
  allowance[caller][addr(_spender)] = _value
  log Approval(
        address owner=_value,
        address spender=caller,
        uint256 value=_spender)
  if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(_spender):
      revert with 0, 32, 37, 0x73455243313336333a205f636865636b416e6443616c6c417070726f766520726576657274, mem[233 len 27]
  if not ext_code.hash(_spender):
      revert with 0, 32, 37, 0x73455243313336333a205f636865636b416e6443616c6c417070726f766520726576657274, mem[233 len 27]
  require ext_code.size(_spender)
  call _spender.0x7b04a2d0 with:
       gas gas_remaining wei
      args caller, _value, 96, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if Mask(32, 224, ext_call.return_data[0]) != 0x7b04a2d000000000000000000000000000000000000000000000000000000000:
      revert with 0, 'sERC1363: _checkAndCallApprove revert'
  return 1

def burnFrom(address _from, uint256 _value) payable: 
  require calldata.size - 4 >= 64
  if _value > allowance[addr(_from)][caller]:
      revert with 0, 32, 36, 0x7245524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63, mem[164 len 28], mem[220 len 4]
  if not _from:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
  if not caller:
      revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
  allowance[addr(_from)][caller] -= _value
  log Approval(
        address owner=(allowance[addr(_from)][caller] - _value),
        address spender=_from,
        uint256 value=caller)
  if not _from:
      revert with 0, 32, 33, 0x6545524332303a206275726e2066726f6d20746865207a65726f20616464726573, mem[293 len 31]
  if _value > balanceOf[addr(_from)]:
      revert with 0, 32, 34, 0x7445524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[258 len 30], mem[318 len 2]
  balanceOf[addr(_from)] -= _value
  if _value > totalSupply:
      revert with 0, 'SafeMath: subtraction overflow'
  totalSupply -= _value
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 value=0)

def transfer(address _to, uint256 _value) payable: 
  require calldata.size - 4 >= 64
  if not transferEnabled:
      if not stor8[('name', 'stor4F50', 5715144146718838610)][1][caller]:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      74,
                      0x7242617365546f6b656e3a207472616e73666572206973206e6f7420656e61626c6564206f722066726f6d20646f6573206e6f74206861766520746865204f50455241544f5220726f6c,
                      mem[238 len 22]
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  37,
                  0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                  mem[201 len 27]
  if not _to:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  35,
                  0x7345524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[199 len 29]
  if not caller:
      if _value + totalSupply < totalSupply:
          revert with 0, 'SafeMath: addition overflow'
      if _value + totalSupply > cap:
          revert with 0, 'ERC20Capped: cap exceeded'
  if _value > balanceOf[caller]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[166 len 26],
                  mem[218 len 6]
  balanceOf[caller] -= _value
  if _value + balanceOf[_to] < balanceOf[_to]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] = _value + balanceOf[_to]
  log Transfer(
        address from=_value,
        address to=caller,
        uint256 value=_to)
  return 1

def unknown36568abe(uint256 _param1, addr _param2) payable: 
  require calldata.size - 4 >= 64
  if _param2 != caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  47,
                  0x6f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c,
                  mem[211 len 17]
  if unknown248a9ca3[_param1][1][addr(_param2)].field_0:
      require unknown248a9ca3[_param1].field_0 - 1 < unknown248a9ca3[_param1].field_0
      require unknown248a9ca3[_param1][1][addr(_param2)].field_0 - 1 < unknown248a9ca3[_param1].field_0
      unknown248a9ca3[_param1][unknown248a9ca3[_param1][1][addr(_param2)].field_0].field_0 = unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0
      unknown248a9ca3[_param1][1][unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0].field_0 = unknown248a9ca3[_param1][1][addr(_param2)].field_0
      require unknown248a9ca3[_param1].field_0
      unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0 = 0
      unknown248a9ca3[_param1].field_0--
      unknown248a9ca3[_param1][1][addr(_param2)].field_0 = 0
      log 0xf6391f5c: _param1, _param2, caller

def unknownd547741f(uint256 _param1, addr _param2) payable: 
  require calldata.size - 4 >= 64
  if not unknown248a9ca3[unknown248a9ca3[_param1].field_512][1][caller].field_0:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  48,
                  0x65416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                  mem[212 len 16]
  if unknown248a9ca3[_param1][1][addr(_param2)].field_0:
      require unknown248a9ca3[_param1].field_0 - 1 < unknown248a9ca3[_param1].field_0
      require unknown248a9ca3[_param1][1][addr(_param2)].field_0 - 1 < unknown248a9ca3[_param1].field_0
      unknown248a9ca3[_param1][unknown248a9ca3[_param1][1][addr(_param2)].field_0].field_0 = unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0
      unknown248a9ca3[_param1][1][unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0].field_0 = unknown248a9ca3[_param1][1][addr(_param2)].field_0
      require unknown248a9ca3[_param1].field_0
      unknown248a9ca3[_param1][unknown248a9ca3[_param1].field_0].field_0 = 0
      unknown248a9ca3[_param1].field_0--
      unknown248a9ca3[_param1][1][addr(_param2)].field_0 = 0
      log 0xf6391f5c: _param1, _param2, caller

def approveAndCall(address _spender, uint256 _amount, bytes _extraData) payable: 
  require calldata.size - 4 >= 96
  require _extraData <= 4294967296
  require _extraData + 36 <= calldata.size
  require _extraData.length <= 4294967296 and _extraData + _extraData.length + 36 <= calldata.size
  if not caller:
      revert with 0, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[ceil32(_extraData.length) + 232 len 28]
  if not _spender:
      revert with 0, 
                  32,
                  34,
                  0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[ceil32(_extraData.length) + 230 len 30]
  allowance[caller][addr(_spender)] = _amount
  mem[ceil32(_extraData.length) + 128] = _amount
  log Approval(address owner, address spender, uint256 value):
               Mask(8 * -ceil32(_extraData.length) + _extraData.length + 32, 0, 0),
               mem[_extraData.length + 160 len -_extraData.length + ceil32(_extraData.length)],
               caller,
               _spender,
  if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(_spender):
      revert with 0, 
                  32,
                  37,
                  0x73455243313336333a205f636865636b416e6443616c6c417070726f766520726576657274,
                  mem[ceil32(_extraData.length) + 233 len 27]
  if not ext_code.hash(_spender):
      revert with 0, 
                  32,
                  37,
                  0x73455243313336333a205f636865636b416e6443616c6c417070726f766520726576657274,
                  mem[ceil32(_extraData.length) + 233 len 27]
  require ext_code.size(_spender)
  call _spender with:
       gas gas_remaining wei
      args caller, _amount, Array(len=_extraData.length, data=_extraData[all])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if Mask(32, 224, ext_call.return_data[0]) != 0x7b04a2d000000000000000000000000000000000000000000000000000000000:
      revert with 0, 
                  32,
                  37,
                  0x73455243313336333a205f636865636b416e6443616c6c417070726f766520726576657274,
                  Mask(216, 0, _extraData.length)
  return 0, 1

def transferAndCall(address _to, uint256 _value) payable: 
  require calldata.size - 4 >= 64
  if not transferEnabled:
      if not stor8[('name', 'stor4F50', 5715144146718838610)][1][caller]:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      74,
                      0x7242617365546f6b656e3a207472616e73666572206973206e6f7420656e61626c6564206f722066726f6d20646f6573206e6f74206861766520746865204f50455241544f5220726f6c,
                      mem[270 len 22]
  if not caller:
      revert with 0, 32, 37, 0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573, mem[233 len 27]
  if not _to:
      revert with 0, 32, 35, 0x7345524332303a207472616e7366657220746f20746865207a65726f20616464726573, mem[231 len 29]
  if not caller:
      if _value + totalSupply < totalSupply:
          revert with 0, 'SafeMath: addition overflow'
      if _value + totalSupply > cap:
          revert with 0, 'ERC20Capped: cap exceeded'
  if _value > balanceOf[caller]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[198 len 26],
                  mem[250 len 6]
  balanceOf[caller] -= _value
  if _value + balanceOf[_to] < balanceOf[_to]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] = _value + balanceOf[_to]
  log Transfer(
        address from=_value,
        address to=caller,
        uint256 value=_to)
  if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(_to):
      revert with 0, 32, 38, 0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274, mem[330 len 26]
  if not ext_code.hash(_to):
      revert with 0, 32, 38, 0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274, mem[330 len 26]
  require ext_code.size(_to)
  call _to.0x88a7ca5c with:
       gas gas_remaining wei
      args caller, caller, _value, 128, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if Mask(32, 224, ext_call.return_data[0]) != 0x88a7ca5c00000000000000000000000000000000000000000000000000000000:
      revert with 0, 'eERC1363: _checkAndCallTransfer revert'
  return 1

def transferFrom(address _from, address _to, uint256 _value) payable: 
  require calldata.size - 4 >= 96
  if not transferEnabled:
      if not stor8[('name', 'stor4F50', 5715144146718838610)][1][addr(_from)]:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      74,
                      0x7242617365546f6b656e3a207472616e73666572206973206e6f7420656e61626c6564206f722066726f6d20646f6573206e6f74206861766520746865204f50455241544f5220726f6c,
                      mem[238 len 22]
  if not _from:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  37,
                  0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                  mem[201 len 27]
  if not _to:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  35,
                  0x7345524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[199 len 29]
  if not _from:
      if _value + totalSupply < totalSupply:
          revert with 0, 'SafeMath: addition overflow'
      if _value + totalSupply > cap:
          revert with 0, 'ERC20Capped: cap exceeded'
  if _value > balanceOf[addr(_from)]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[166 len 26],
                  mem[218 len 6]
  balanceOf[addr(_from)] -= _value
  if _value + balanceOf[_to] < balanceOf[_to]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] = _value + balanceOf[_to]
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 value=_to)
  if _value > allowance[addr(_from)][caller]:
      revert with 0, 
                  32,
                  40,
                  0x7345524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63,
                  mem[264 len 24],
                  mem[312 len 8]
  if not _from:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[392 len 28]
  if not caller:
      revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[390 len 30]
  allowance[addr(_from)][caller] -= _value
  log Approval(
        address owner=(allowance[addr(_from)][caller] - _value),
        address spender=_from,
        uint256 value=caller)
  return 1

def transferAndCall(address _to, uint256 _value, bytes _data) payable: 
  require calldata.size - 4 >= 96
  require _data <= 4294967296
  require _data + 36 <= calldata.size
  require _data.length <= 4294967296 and _data + _data.length + 36 <= calldata.size
  if not transferEnabled:
      if not unknown248a9ca3[Mask(64, -(8 * ceil32(_data.length) + -_data.length + 8) + 256, 0) >> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0 + (8 * -ceil32(_data.length)) + (8 * _data.length) + 256][1][caller].field_0:
          revert with 0, 
                      32,
                      74,
                      0x7242617365546f6b656e3a207472616e73666572206973206e6f7420656e61626c6564206f722066726f6d20646f6573206e6f74206861766520746865204f50455241544f5220726f6c,
                      mem[ceil32(_data.length) + 270 len 22]
  if not caller:
      revert with 0, 
                  32,
                  37,
                  0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 233 len 27]
  if not _to:
      revert with 0, 
                  32,
                  35,
                  0x7345524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 231 len 29]
  if not caller:
      if _value + totalSupply < totalSupply:
          revert with 0, 'SafeMath: addition overflow'
      if _value + totalSupply > cap:
          revert with 0, 'ERC20Capped: cap exceeded'
  if _value > balanceOf[caller]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[ceil32(_data.length) + 198 len 26],
                  mem[ceil32(_data.length) + 250 len 6]
  balanceOf[caller] -= _value
  if _value + balanceOf[_to] < balanceOf[_to]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] = _value + balanceOf[_to]
  log Transfer(
        address from=_value,
        address to=caller,
        uint256 value=_to)
  if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(_to):
      revert with 0, 
                  32,
                  38,
                  0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274,
                  mem[ceil32(_data.length) + 330 len 26]
  if not ext_code.hash(_to):
      revert with 0, 
                  32,
                  38,
                  0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274,
                  mem[ceil32(_data.length) + 330 len 26]
  require ext_code.size(_to)
  call _to.0x88a7ca5c with:
       gas gas_remaining wei
      args caller, caller, _value, Array(len=_data.length, data=_data[all])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if Mask(32, 224, ext_call.return_data[0]) != 0x88a7ca5c00000000000000000000000000000000000000000000000000000000:
      revert with 0, 'eERC1363: _checkAndCallTransfer revert'
  return 1

def transferFromAndCall(address _from, address _to, uint256 _value) payable: 
  require calldata.size - 4 >= 96
  if not transferEnabled:
      if not stor8[('name', 'stor4F50', 5715144146718838610)][1][addr(_from)]:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      74,
                      0x7242617365546f6b656e3a207472616e73666572206973206e6f7420656e61626c6564206f722066726f6d20646f6573206e6f74206861766520746865204f50455241544f5220726f6c,
                      mem[270 len 22]
  if not _from:
      revert with 0, 32, 37, 0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573, mem[233 len 27]
  if not _to:
      revert with 0, 32, 35, 0x7345524332303a207472616e7366657220746f20746865207a65726f20616464726573, mem[231 len 29]
  if not _from:
      if _value + totalSupply < totalSupply:
          revert with 0, 'SafeMath: addition overflow'
      if _value + totalSupply > cap:
          revert with 0, 'ERC20Capped: cap exceeded'
  if _value > balanceOf[addr(_from)]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[198 len 26],
                  mem[250 len 6]
  balanceOf[addr(_from)] -= _value
  if _value + balanceOf[_to] < balanceOf[_to]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] = _value + balanceOf[_to]
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 value=_to)
  if _value > allowance[addr(_from)][caller]:
      revert with 0, 
                  32,
                  40,
                  0x7345524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63,
                  mem[296 len 24],
                  mem[344 len 8]
  if not _from:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[424 len 28]
  if not caller:
      revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[422 len 30]
  allowance[addr(_from)][caller] -= _value
  log Approval(
        address owner=(allowance[addr(_from)][caller] - _value),
        address spender=_from,
        uint256 value=caller)
  if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(_to):
      revert with 0, 32, 38, 0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274, mem[426 len 26]
  if not ext_code.hash(_to):
      revert with 0, 32, 38, 0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274, mem[426 len 26]
  require ext_code.size(_to)
  call _to.0x88a7ca5c with:
       gas gas_remaining wei
      args caller, addr(_from), _value, 128, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if Mask(32, 224, ext_call.return_data[0]) != 0x88a7ca5c00000000000000000000000000000000000000000000000000000000:
      revert with 0, 'eERC1363: _checkAndCallTransfer revert'
  return 1

def transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) payable: 
  require calldata.size - 4 >= 128
  require _data <= 4294967296
  require _data + 36 <= calldata.size
  require _data.length <= 4294967296 and _data + _data.length + 36 <= calldata.size
  if not transferEnabled:
      if not unknown248a9ca3[Mask(64, -(8 * ceil32(_data.length) + -_data.length + 8) + 256, 0) >> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0 + (8 * -ceil32(_data.length)) + (8 * _data.length) + 256][1][addr(_from)].field_0:
          revert with 0, 
                      32,
                      74,
                      0x7242617365546f6b656e3a207472616e73666572206973206e6f7420656e61626c6564206f722066726f6d20646f6573206e6f74206861766520746865204f50455241544f5220726f6c,
                      mem[ceil32(_data.length) + 270 len 22]
  if not _from:
      revert with 0, 
                  32,
                  37,
                  0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 233 len 27]
  if not _to:
      revert with 0, 
                  32,
                  35,
                  0x7345524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 231 len 29]
  if not _from:
      if _value + totalSupply < totalSupply:
          revert with 0, 'SafeMath: addition overflow'
      if _value + totalSupply > cap:
          revert with 0, 'ERC20Capped: cap exceeded'
  if _value > balanceOf[addr(_from)]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[ceil32(_data.length) + 198 len 26],
                  mem[ceil32(_data.length) + 250 len 6]
  balanceOf[addr(_from)] -= _value
  if _value + balanceOf[_to] < balanceOf[_to]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[addr(_to)] = _value + balanceOf[_to]
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 value=_to)
  if _value > allowance[addr(_from)][caller]:
      revert with 0, 
                  32,
                  40,
                  0x7345524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63,
                  mem[ceil32(_data.length) + 296 len 24],
                  mem[ceil32(_data.length) + 344 len 8]
  if not _from:
      revert with 0, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 424 len 28]
  if not caller:
      revert with 0, 
                  32,
                  34,
                  0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 422 len 30]
  allowance[addr(_from)][caller] -= _value
  log Approval(
        address owner=(allowance[addr(_from)][caller] - _value),
        address spender=_from,
        uint256 value=caller)
  if 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 == ext_code.hash(_to):
      revert with 0, 
                  32,
                  38,
                  0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274,
                  mem[ceil32(_data.length) + 426 len 26]
  if not ext_code.hash(_to):
      revert with 0, 
                  32,
                  38,
                  0x65455243313336333a205f636865636b416e6443616c6c5472616e7366657220726576657274,
                  mem[ceil32(_data.length) + 426 len 26]
  require ext_code.size(_to)
  call _to.0x88a7ca5c with:
       gas gas_remaining wei
      args caller, addr(_from), _value, Array(len=_data.length, data=_data[all])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if Mask(32, 224, ext_call.return_data[0]) != 0x88a7ca5c00000000000000000000000000000000000000000000000000000000:
      revert with 0, 'eERC1363: _checkAndCallTransfer revert'
  return 1

